import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { CardTopCraftsmanService } from '../card-top-craftsman.service';
import { FormControl, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-craftsman',
  templateUrl: './craftsman.component.html',
  styleUrl: './craftsman.component.scss'
})
export class CraftsmanComponent {

  craftsman: any = {};
  craftsmanId: string | null = "";
  note: string = "";
  constructor(private activatedRoute:ActivatedRoute, private craftsmanService:CardTopCraftsmanService) {}

  async ngOnInit(): Promise<void> {
    this.craftsmanId = this.activatedRoute.snapshot.params['id'];
    this.craftsman = (await this.craftsmanService.getDataCrafstman()).find((x:any) => x.id == this.craftsmanId);
    this.note = this.craftsman.note.replace('.', ',');
    this.setStarFilling();
  }

  form = new FormGroup({
    lastName: new FormControl('', [Validators.required, Validators.maxLength(20), Validators.pattern('[a-zA-Zéèêàîùôçïäâëüöœ -]*')]),
    firstName: new FormControl('', [Validators.required, Validators.maxLength(20), Validators.pattern('[a-zA-Zéèêàîùôçïäâëüöœ -]*')]),
    mail: new FormControl('', [Validators.required, Validators.email]),
    subject: new FormControl('', [Validators.required, Validators.maxLength(60)]),
    message: new FormControl('', [Validators.required, Validators.maxLength(1000)])
  })

  trySendInvalidForm = false;
  sendValidForm() {
    this.form.reset({ lastName: '', firstName: '', mail: '', subject: '', message: '' });
    this.trySendInvalidForm = false;
    alert("Merci, votre message a bien été envoyé");
  }

  sendInvalidForm() {
    this.trySendInvalidForm = true;
  }



  // Used for the tackBy for each star generated by the ngFor in card-top-craftsman.componenet.html
  starId(index: number, star: any): number {
    return star.id;
  }

  stars:any[] = [
    {
      id: "star-1",
      fill: "0%"
    },
    {
      id: "star-2",
      fill: "0%"
    },
    {
      id: "star-3",
      fill: "0%"
    },
    {
      id: "star-4",
      fill: "0%"
    },
    {
      id: "star-5",
      fill: "0%"
    }
  ];
  
  setStarFilling() {
    let craftsmanNote = parseFloat(this.craftsman.note);
    for (let i=0; i < this.stars.length; i++) {
      if (i+1 <= craftsmanNote) {
        this.stars[i].fill = "100%";
      } else if (craftsmanNote - i > 0) {
        let decimal = 1 - (i+1-craftsmanNote);
        decimal = (decimal * 80) + 10; // Not an actual percentage but the obtained value is more suited for UI/UX
        this.stars[i].fill = decimal + "%";
      }
    }
  }
}
